import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from datetime import datetime, timedelta
from deep_translator import GoogleTranslator

# Configuraci칩n de la p치gina
st.set_page_config(page_title="An치lisis Burs치til - Mercado Mexicano", layout="wide")

# T칤tulo principal
st.title("游늵 An치lisis Burs치til - Mercado Mexicano")

# Lista de tickers v치lidos para el mercado mexicano
lista_tickers = [
    "WALMEX.MX", "AMXB.MX", "CEMEXCPO.MX", "LABB.MX", "CUERVO.MX", "FUNO11.MX",
    "TRAXIONA.MX", "GMEXICOB.MX", "KIMBERA.MX", "KOFUBL.MX", "GFNORTEO.MX", "VOLARA.MX",
    "BBAJIOO.MX", "ALSEA.MX", "Q.MX", "GENTERA.MX", "BOLSAA.MX", "DLRTRAC15.MX", "NAFTRACISHRS.MX"
]

# Barra lateral para entrada de usuario
st.sidebar.header("Selecci칩n de Empresa")
ticker_input = st.sidebar.selectbox("Selecciona un ticker:", lista_tickers)
st.sidebar.markdown("*Estos tickers corresponden a empresas que cotizan en la Bolsa Mexicana de Valores.*")

# Diccionario de nombres completos de las empresas mexicanas para mostrar info adicional
empresas_info = {
    "WALMEX.MX": "Walmart de M칠xico y Centroam칠rica",
    "AMXB.MX": "Am칠rica M칩vil",
    "CEMEXCPO.MX": "CEMEX",
    "LABB.MX": "Genomma Lab Internacional",
    "CUERVO.MX": "Becle (Jos칠 Cuervo)",
    "FUNO11.MX": "Fibra Uno",
    "TRAXIONA.MX": "Grupo Traxi칩n",
    "GMEXICOB.MX": "Grupo M칠xico",
    "KIMBERA.MX": "Kimberly-Clark de M칠xico",
    "KOFUBL.MX": "Coca-Cola FEMSA",
    "GFNORTEO.MX": "Grupo Financiero Banorte",
    "VOLARA.MX": "Controladora Vuela Compa침칤a de Aviaci칩n (Volaris)",
    "BBAJIOO.MX": "Banco del Baj칤o",
    "ALSEA.MX": "Alsea",
    "Q.MX": "Qu치litas Controladora",
    "GENTERA.MX": "Gentera",
    "BOLSAA.MX": "Grupo Bolsa Mexicana de Valores",
    "DLRTRAC15.MX": "DLRTRAC15 (ETF que sigue al d칩lar)",
    "NAFTRACISHRS.MX": "NAFTRAC (ETF que sigue al IPC)"
}

# Funci칩n para traducir texto al espa침ol usando deep_translator
@st.cache_data(ttl=3600)  # Cachear traducciones por 1 hora
def translate_to_spanish(text):
    if not text or text == 'No disponible':
        return "No hay descripci칩n disponible."
    
    try:
        # Dividimos el texto en fragmentos m치s peque침os para evitar l칤mites de la API
        max_length = 5000  # Google Translate tiene un l칤mite aproximado de 5000 caracteres
        parts = [text[i:i+max_length] for i in range(0, len(text), max_length)]
        
        translated_parts = []
        for part in parts:
            # Usar GoogleTranslator de deep_translator
            translation = GoogleTranslator(source='auto', target='es').translate(part)
            translated_parts.append(translation)
        
        return " ".join(translated_parts)
    except Exception as e:
        st.warning(f"No se pudo traducir la descripci칩n: {str(e)}")
        return text  # Devolver el texto original si hay error

# Funci칩n para calcular CAGR (Compound Annual Growth Rate)
def calculate_cagr(initial_value, final_value, years):
    if initial_value <= 0 or years <= 0:
        return 0
    return (final_value / initial_value) ** (1 / years) - 1

# Funci칩n para verificar si el ticker es v치lido
@st.cache_data(ttl=3600)  # Cachear datos por 1 hora
def is_valid_ticker(ticker):
    try:
        stock = yf.Ticker(ticker)
        # Solo verificamos si podemos acceder a la informaci칩n b치sica
        info = stock.info
        return 'longName' in info
    except:
        return False

# Funci칩n para obtener datos de la empresa
@st.cache_data(ttl=3600)  # Cachear datos por 1 hora
def get_stock_data(ticker):
    try:
        stock = yf.Ticker(ticker)
        
        # Extraer la informaci칩n necesaria en un diccionario
        info_dict = {}
        info = stock.info
        for key in ['longName', 'sector', 'industry', 'longBusinessSummary']:
            info_dict[key] = info.get(key, '')
        
        # Obtener datos hist칩ricos de los 칰ltimos 5 a침os
        end_date = datetime.now()
        start_date = end_date - timedelta(days=5*365)
        hist_data = stock.history(start=start_date, end=end_date)
        
        # Convertir a DataFrame para asegurar serializaci칩n
        hist_data_df = pd.DataFrame(hist_data)
        
        return info_dict, hist_data_df
    except Exception as e:
        st.error(f"Error al cargar datos: {str(e)}")
        return {}, pd.DataFrame()

# Funci칩n para crear gr치fico de precios
def create_price_chart(data, company_name):
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=data.index, y=data['Close'], mode='lines', name='Precio de Cierre', line=dict(color='#2E86C1', width=2)))
    
    fig.update_layout(
        title=f'Precios de {company_name} (칔ltimos 5 A침os)',
        xaxis_title='Fecha',
        yaxis_title='Precio de Cierre Ajustado (MXN)',
        template='plotly_white',
        height=500,
        xaxis=dict(
            rangeselector=dict(
                buttons=list([
                    dict(count=1, label="1m", step="month", stepmode="backward"),
                    dict(count=6, label="6m", step="month", stepmode="backward"),
                    dict(count=1, label="1y", step="year", stepmode="backward"),
                    dict(count=3, label="3y", step="year", stepmode="backward"),
                    dict(step="all", label="Todo")
                ])
            ),
            rangeslider=dict(visible=True),
            type="date"
        )
    )
    return fig

# Funci칩n para calcular y mostrar m칠tricas de rendimiento
def show_performance_metrics(data, company_name):
    # Calcular rendimientos diarios
    data['Daily Return'] = data['Close'].pct_change()
    
    # Obtener precios para diferentes per칤odos
    try:
        current_price = data['Close'].iloc[-1]
        price_1y_ago = data['Close'].iloc[-252] if len(data) >= 252 else data['Close'].iloc[0]
        price_3y_ago = data['Close'].iloc[-756] if len(data) >= 756 else data['Close'].iloc[0]
        price_5y_ago = data['Close'].iloc[-1260] if len(data) >= 1260 else data['Close'].iloc[0]
        
        # Calcular CAGRs
        cagr_1y = calculate_cagr(price_1y_ago, current_price, 1)
        cagr_3y = calculate_cagr(price_3y_ago, current_price, 3)
        cagr_5y = calculate_cagr(price_5y_ago, current_price, 5)
        
        # Calcular volatilidad anualizada (desviaci칩n est치ndar de rendimientos diarios * sqrt(252))
        daily_std = np.std(data['Daily Return'].dropna())
        annualized_std = daily_std * np.sqrt(252)
        
        # Crear dataframe para tabla de rendimientos
        returns_data = {
            'Per칤odo': ['1 a침o', '3 a침os', '5 a침os'],
            'Rendimiento Anualizado': [f"{cagr_1y:.2%}", f"{cagr_3y:.2%}", f"{cagr_5y:.2%}"]
        }
        
        returns_df = pd.DataFrame(returns_data)
        
        # Mostrar tabla de rendimientos
        st.header(f"游늳 Rendimientos Anualizados de {company_name}")
        st.markdown("Este c치lculo considera el precio al inicio y al final del periodo para determinar el rendimiento anualizado.")
        st.table(returns_df)
        
        # Mostrar medida de riesgo
        st.header("游댍 An치lisis de Riesgo")
        st.markdown(f"**Volatilidad anualizada:** {annualized_std:.2%}")
        st.markdown("""
        La volatilidad anualizada es una medida del riesgo basada en la desviaci칩n est치ndar de los rendimientos diarios, 
        multiplicada por la ra칤z cuadrada de 252 (n칰mero aproximado de d칤as de trading en un a침o). 
        Este valor representa la dispersi칩n de los rendimientos respecto a su media.
        """)
        
    except Exception as e:
        st.error(f"Error al calcular m칠tricas de rendimiento: {e}")

# 츼rea principal - Mostrar datos si el ticker es v치lido
if ticker_input:
    with st.spinner(f'Cargando informaci칩n de {ticker_input}...'):
        # Verificar si el ticker seleccionado es v치lido
        if is_valid_ticker(ticker_input):
            # Obtener datos
            info, hist_data = get_stock_data(ticker_input)
            
            if info and not hist_data.empty:
                # Informaci칩n de la empresa
                company_ref = ticker_input.replace(".MX", "")
                company_name = info.get('longName', empresas_info.get(ticker_input, ticker_input))
                sector = info.get('sector', 'No disponible')
                industry = info.get('industry', 'No disponible')
                description_en = info.get('longBusinessSummary', 'No hay descripci칩n disponible.')
                
                # Traducir sector, industria y descripci칩n al espa침ol
                with st.spinner('Traduciendo informaci칩n al espa침ol...'):
                    description_es = translate_to_spanish(description_en)
                    sector_es = translate_to_spanish(sector) if sector != 'No disponible' else sector
                    industry_es = translate_to_spanish(industry) if industry != 'No disponible' else industry
                
                # Contenedor para informaci칩n de empresa
                company_container = st.container()
                with company_container:
                    st.header(f"游끽 {company_name} ({ticker_input})")
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown(f"**Sector:** {sector_es}")
                    with col2:
                        st.markdown(f"**Industria:** {industry_es}")
                    
                    st.subheader("Descripci칩n de la Empresa")
                    st.markdown(description_es)
                
                # Gr치fico de precios
                chart_container = st.container()
                with chart_container:
                    if not hist_data.empty:
                        price_chart = create_price_chart(hist_data, company_name)
                        st.plotly_chart(price_chart, use_container_width=True)
                    else:
                        st.warning("No se pudieron cargar datos hist칩ricos para este ticker.")
                
                # M칠tricas de rendimiento
                metrics_container = st.container()
                with metrics_container:
                    if not hist_data.empty:
                        show_performance_metrics(hist_data, company_name)
                    else:
                        st.warning("No se pudieron calcular m칠tricas de rendimiento debido a la falta de datos.")
            else:
                st.error("No se pudieron obtener datos para este ticker.")
        else:
            st.error("Ticker inv치lido o no se pudo establecer conexi칩n con Yahoo Finance.")

# Informaci칩n adicional en la barra lateral
st.sidebar.markdown("---")
st.sidebar.subheader("Acerca de esta aplicaci칩n")
st.sidebar.markdown("""
Esta aplicaci칩n permite analizar datos burs치tiles de empresas que cotizan en la Bolsa Mexicana de Valores.
Los datos se obtienen a trav칠s de Yahoo Finance.

Funcionalidades:
- Visualizaci칩n de informaci칩n fundamental de la empresa
- Gr치fico de precios hist칩ricos
- C치lculo de rendimientos anualizados (CAGR)
- An치lisis de riesgo (volatilidad)
""")

# Informaci칩n del mercado mexicano
st.sidebar.markdown("---")
st.sidebar.subheader("Mercado Mexicano")
st.sidebar.markdown("""
La Bolsa Mexicana de Valores (BMV) es la segunda bolsa de valores m치s grande 
de Latinoam칠rica despu칠s de la Bolsa de S칚o Paulo. La moneda utilizada es el peso mexicano (MXN).

El principal 칤ndice burs치til es el S&P/BMV IPC (칈ndice de Precios y Cotizaciones), 
que agrupa a las 35 empresas m치s l칤quidas del mercado mexicano.
""")

# Mostrar hora de actualizaci칩n
st.sidebar.markdown("---")
st.sidebar.markdown(f"*칔ltima actualizaci칩n: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}*")